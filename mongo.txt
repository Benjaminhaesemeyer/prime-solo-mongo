//1.Create a collection named orders.
db.createCollection('orders')

//2.Insert at least 3 documents that represent an order. IMPORTANT: See section below for fields. Order dates should be: 2017-02-03, 2017-04-04, 2017-01-02
db.orders.insert(
{orderDate: new Date('2017-02-03'),
orderTotal:5,
lineitems:[
    {productName: 'pizza',
    quantity: 1,
    unitPrice: 1}
]}
  );
db.orders.insert(
{orderDate: new Date('2017-04-04'),
orderTotal:10,
lineitems:[
    {productName: 'burger',
    quantity: 2,
    unitPrice: 2}
]}
  );
db.orders.insert(
{orderDate:new Date('2017-01-02'),
orderTotal:15,
lineitems:[
    {productName: 'hotdog',
    quantity: 3,
    unitPrice: 3}
]}
  );
  
//3.Find all orders and make them look pretty.
db.orders.find().pretty()

//4.Find all orders with an orderDate that is after 1/31/2017.
db.orders.find({orderDate: {$lt: new Date('2017-01-31')}})

//5.Change the orderTotal from 2/3/2017 to 63 dollars (you do NOT have to ensure the lineItems' unitPrice * quantity add up to the orderTotal)
db.orders.update({orderDate: new Date("2017-02-03")}, {$set: {orderTotal: 63}});

//6.Add another lineItem to the order from 4/4/2017
db.orders.update({orderDate: new Date("2017-04-04")}, {$push:{lineitems:{productName: 'taco', quantity: 2, unitPrice: 4}}});

//7.Change the first lineItem in the order from 1/2/2017 to be for 2 'transistor radio's
db.orders.update({orderDate: new Date("2017-01-02")}, {$set:{lineitems:{productName: 'transistor radio' , quantity: 2}}});

//8.Find orders with lineItems that have a quantity that is less than 10, but greater than 2. You will have to research $and
db.orders.find([lineitems: {quantity:($lt:10}}).... i surrender.
